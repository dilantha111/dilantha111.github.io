{"version":3,"sources":["components/AvatarSection.js","App.js","serviceWorker.js","index.js"],"names":["AvatarSection","Container","fluid","className","Row","Col","md","Image","src","thumbnail","class","target","rel","href","App","style","textAlign","margin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAkCeA,MA/Bf,WACI,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,0BACvB,kBAACF,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAOC,IAAI,aAAaC,WAAS,KAErC,kBAACJ,EAAA,EAAD,CAAKC,GAAI,EAAGH,UAAU,qBAClB,2CACA,sDACA,4BACI,uBAAGA,UAAU,mBADjB,aACgD,uBAAGA,UAAU,iBAD7D,cAC2F,uBAAGO,MAAM,iBADpG,YACgI,uBAAGP,UAAU,mBAD7I,cAC6K,uBAAGA,UAAU,eAD1L,QAGA,wBAAIA,UAAU,gBAAd,eAEI,uBAAGQ,OAAO,SAASC,IAAI,sBAAsBC,KAAK,kCAAlD,IAAoF,uBAAGV,UAAU,kBAAjG,KACA,uBAAGQ,OAAO,SAASC,IAAI,sBAAsBC,KAAK,6DAAlD,IAA+G,uBAAGV,UAAU,oBAA5H,KACA,uBAAGQ,OAAO,SAASC,IAAI,sBAAsBC,KAAK,oCAAlD,IAAsF,uBAAGV,UAAU,mBAAnG,KACA,uBAAGQ,OAAO,SAASC,IAAI,sBAAsBC,KAAK,mDAAlD,IAAqG,uBAAGV,UAAU,2BAAlH,MAEJ,kICTTW,MAXf,WACE,OACE,yBAAKX,UAAU,gBACb,kBAAC,EAAD,MACA,6BACE,wBAAIY,MAAO,CAACC,UAAW,SAAUC,OAAQ,SAAzC,uBCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e549f60d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Container, Col, Image } from 'react-bootstrap';\r\n\r\nfunction AvatarSection() {\r\n    return (\r\n        <Container fluid className='wrapper-avatar-section'>\r\n            <Container>\r\n                <Row>\r\n                    <Col md={4}>\r\n                        <Image src=\"avatar.png\" thumbnail />\r\n                    </Col>\r\n                    <Col md={8} className=\"description-panel\">\r\n                        <h1> Dilantha  </h1>\r\n                        <h2> Full Stack Developer </h2>\r\n                        <h3>\r\n                            <i className=\"fab fa-node-js\"></i> NodeJS | <i className=\"fab fa-react\"></i> ReactJS | <i class=\"fab fa-vuejs\"></i> VueJS | <i className=\"fab fa-angular\"></i> Angular | <i className=\"fab fa-aws\"></i> AWS\r\n                        </h3>\r\n                        <h3 className='social-links'>\r\n                            Find me on :\r\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/dilantha111\"> <i className=\"fab fa-github\"></i> </a>\r\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/dilantha-prasanjith-9592188a/\"> <i className=\"fab fa-linkedin\"></i> </a>\r\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/dilanthaw111\"> <i className=\"fab fa-twitter\"></i> </a>\r\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.facebook.com/dilantha.prasanjith.96\"> <i className=\"fab fa-facebook-square\"></i> </a>\r\n                        </h3>\r\n                        <p>\r\n                            Code for a living and for a hobby | Life is just a flat arrow function with only lexical scope\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default AvatarSection;","import React from 'react';\r\nimport './App.css';\r\nimport AvatarSection from './components/AvatarSection';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"main-wrapper\">\r\n      <AvatarSection />\r\n      <div>\r\n        <h1 style={{textAlign: 'center', margin: '50px'}}> Yet to come !!!</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}